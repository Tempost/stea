generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

generator zod {
    provider              = "zod-prisma"
    output                = "./zod"
    relationModel         = true
    modelCase             = "PascalCase"
    modelSuffix           = "Model"
    useDecimalJs          = true
    imports               = null
    prismaJsonNullability = true
}

enum Status {
    Life
    Annual
    New
    Renew
}

enum Type {
    Individual
    Family
}

enum JRSR {
    JR
    SR
}

enum PaymentMethod {
    PayPal
    Check
}

model Member {
    uid            String         @id @default(cuid())
    createdAt      DateTime?      @default(now())
    updatedAt      DateTime?      @updatedAt
    firstName      String         @db.VarChar(255)
    lastName       String         @db.VarChar(255)
    fullName       String         @db.VarChar(255)
    membershipDate DateTime?
    memberType     Type
    memberStatus   Status
    JRSR           JRSR
    family         FamilyMember[]
    boardMember    Boolean        @default(false)
    address        String         @db.VarChar(255)
    city           String         @db.VarChar(25)
    state          String         @db.VarChar(25)
    zip            Int
    phone          String         @db.VarChar(15)
    email          String?        @db.VarChar(100)
    comments       String         @db.VarChar(4000)
    previousMember Boolean        @default(false)
    riderLevel     String         @db.VarChar(25)
    confirmed      Boolean        @default(false)
    shows          Show[]
    horses         Horse[]
    payment        Payment?
}

model Payment {
    uid            String         @id @default(cuid())
    updatedAt     DateTime?      @updatedAt
    amountPaid    Int?
    datePaid      DateTime?
    paymentMethod PaymentMethod?
    checkNumber   Int?
    comments      String?        @db.VarChar(4000)
    member        Member         @relation(fields: [memberUid], references: [uid])
    memberUid     String
}

model corporateMember {
    name      String    @db.VarChar(255)
    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt
    address   String    @db.VarChar(255)
    city      String    @db.VarChar(25)
    state     String    @db.VarChar(25)
    zip       Int
    phone     String    @db.VarChar(15)
    email     String?   @db.VarChar(100)
    contact   String    @db.VarChar(255)
    regType   String    @db.VarChar(255)
    horses    Horse[]

    @@id([name])
}

model FamilyMember {
    uid        String    @id @default(cuid())
    createdAt  DateTime? @default(now())
    updatedAt  DateTime? @updatedAt
    name       String    @db.VarChar(255)
    email      String?   @db.VarChar(100)
    riderLevel String    @db.VarChar(25)
    member     Member    @relation(fields: [memberUid], references: [uid], onUpdate: NoAction)
    memberUid  String

    @@index(memberUid)
}

model Horse {
    uid              String           @id @default(cuid())
    createdAt        DateTime?        @default(now())
    updatedAt        DateTime?        @updatedAt
    horseRN          String           @db.VarChar(255)
    horseAKA         String?          @db.VarChar(255)
    registrationDate DateTime?
    regType          Type
    corporateMember  corporateMember? @relation(fields: [corpUid], references: [name])
    corpUid          String?
    ranking          TotalRanking?    @relation(fields: [rankingUid], references: [uid])
    rankingUid       String?          @unique
    riders           Member[]
}

model TotalRanking {
    uid         String    @id @default(cuid())
    createdAt   DateTime? @default(now())
    updatedAt   DateTime? @updatedAt
    level       String    @db.VarChar(3)
    division    String    @db.VarChar(20)
    horse       Horse?
    totalPoints Float
    totalShows  Int
    completedHT Boolean
    multiVenue  Boolean
}

model Show {
    uid       String    @id @default(cuid())
    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt
    showName  String    @db.VarChar(150)
    showType  String    @db.VarChar(10)
    riders    Member[]
}
