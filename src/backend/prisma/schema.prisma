generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Member {
  uid            Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  name           String         @db.VarChar(255)
  memberType     String         @db.VarChar(50)
  memberStatus   String         @db.VarChar(20)
  family         FamilyMember[]
  horses         Horse[]
  ranking        TotalRanking?  @relation(fields: [rankingId], references: [uid])
  rankingId      Int?           @unique
  shows          Show[]
  boardMember    Boolean        @default(false)
  address        String         @db.VarChar(255)
  city           String         @db.VarChar(25)
  state          String         @db.VarChar(25)
  zip            Int
  phone          String         @db.VarChar(15)
  previousMember Boolean        @default(false)
  riderLevel     String         @db.VarChar(25)
  confirmed      Boolean        @default(false)
}

model FamilyMember {
  uid        Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String   @db.VarChar(255)
  email      String?  @db.VarChar(100)
  riderLevel String   @db.VarChar(25)
  member     Member   @relation(fields: [memberId], references: [uid], onUpdate: NoAction)
  memberId   Int

  @@index(memberId)
}

model Horse {
  uid              Int           @id @default(autoincrement())
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  horseRN          String?       @db.VarChar(255)
  horseAKA         String?       @db.VarChar(255)
  registrationDate DateTime?
  regType          String        @db.VarChar(25)
  member           Member        @relation(fields: [memberId], references: [uid])
  memberId         Int
  ranking          TotalRanking? @relation(fields: [rankingId], references: [uid])
  rankingId        Int?          @unique

  @@index(memberId)
}

model TotalRanking {
  uid         Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  level       String   @db.VarChar(3)
  division    String   @db.VarChar(20)
  rider       Member?
  horse       Horse?
  totalPoints Float
  totalShows  Int
  completedHT Boolean
}

model Show {
  uid       Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  showName  String   @db.VarChar(150)
  showType  String   @db.VarChar(10)
  riders    Member[]
}
