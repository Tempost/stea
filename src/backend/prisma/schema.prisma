generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "PascalCase"
  modelSuffix           = "Model"
  useDecimalJs          = true
  imports               = null
  prismaJsonNullability = true
}

model Member {
  uid            Int            @id @default(autoincrement())
  createdAt      DateTime?      @default(now())
  updatedAt      DateTime?      @updatedAt
  name           String         @db.VarChar(255)
  memberType     String         @db.VarChar(50)
  memberStatus   String         @db.VarChar(20)
  family         FamilyMember[]
  horses         Horse[]
  ranking        TotalRanking?  @relation(fields: [rankingId], references: [uid])
  rankingId      Int?           @unique
  shows          Show[]
  boardMember    Boolean        @default(false)
  address        String         @db.VarChar(255)
  city           String         @db.VarChar(25)
  state          String         @db.VarChar(25)
  zip            Int
  phone          String         @db.VarChar(15)
  email          String?        @db.VarChar(100)
  previousMember Boolean        @default(false)
  riderLevel     String         @db.VarChar(25)
  confirmed      Boolean        @default(false)
  RiderCombo     RiderCombo[]
}

model corporateMember {
  uid       Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  address   String    @db.VarChar(255)
  city      String    @db.VarChar(25)
  state     String    @db.VarChar(25)
  zip       Int
  phone     String    @db.VarChar(15)
  email     String?   @db.VarChar(100)
  contact   String    @db.VarChar(255)
  regType   String    @db.VarChar(255)
  horses    Horse[]
}

model FamilyMember {
  uid        Int       @id @default(autoincrement())
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  name       String    @db.VarChar(255)
  email      String?   @db.VarChar(100)
  riderLevel String    @db.VarChar(25)
  member     Member    @relation(fields: [memberId], references: [uid], onUpdate: NoAction)
  memberId   Int

  @@index(memberId)
}

model Horse {
  uid              Int              @id @default(autoincrement())
  createdAt        DateTime?        @default(now())
  updatedAt        DateTime?        @updatedAt
  horseRN          String           @db.VarChar(255)
  horseAKA         String?          @db.VarChar(255)
  registrationDate DateTime?
  regType          String           @db.VarChar(25)
  member           Member?          @relation(fields: [memberId], references: [uid])
  memberId         Int?
  corporateMember  corporateMember? @relation(fields: [corpId], references: [uid])
  corpId           Int?
  ranking          TotalRanking?    @relation(fields: [rankingId], references: [uid])
  rankingId        Int?             @unique

  RiderCombo RiderCombo[]
  @@index(memberId)
}

model RiderCombo {
  uid       Int       @id @default(autoincrement())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  rider     Member    @relation(fields: [riderId], references: [uid])
  riderId   Int
  horse     Horse     @relation(fields: [horseId], references: [uid])
  horseId   Int

  @@index([riderId, horseId])
}

model TotalRanking {
  uid         Int       @id @default(autoincrement())
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  level       String    @db.VarChar(3)
  division    String    @db.VarChar(20)
  rider       Member?
  horse       Horse?
  totalPoints Float
  totalShows  Int
  completedHT Boolean
}

model Show {
  uid       Int       @id @default(autoincrement())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  showName  String    @db.VarChar(150)
  showType  String    @db.VarChar(10)
  riders    Member[]
}
