generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "PascalCase"
  modelSuffix           = "Model"
  useDecimalJs          = true
  prismaJsonNullability = true
}

enum Status {
  Life
  Annual
  Renew
}

enum Type {
  Individual
  Family
  Business
}

enum JRSR {
  JR
  SR
}

enum PaymentMethod {
  PayPal
  Check
}

enum PhoneType {
  Mobile
  Home
  Business
}

model NonMemberHorseOwner {
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  firstName String    @db.VarChar(255)
  lastName  String    @db.VarChar(255)
  fullName  String    @db.VarChar(255)
  email     String    @db.VarChar(100)
  phone     String    @db.VarChar(15)
  phoneType PhoneType @default(Mobile)
  horses    Horse[]

  @@id([fullName])
}

model Member {
  createdAt         DateTime?    @default(now())
  updatedAt         DateTime?    @updatedAt
  /// @zod.min(1)
  firstName         String       @db.VarChar(255)
  /// @zod.min(1)
  lastName          String       @db.VarChar(255)
  fullName          String       @db.VarChar(255)
  boardMember       Boolean      @default(false)
  /// @zod.min(1)
  address           String       @db.VarChar(255)
  /// @zod.min(1)
  city              String       @db.VarChar(25)
  /// @zod.min(1)
  state             String       @db.VarChar(25)
  /// @zod.min(1)
  phone             String       @db.VarChar(15)
  phoneType         PhoneType    @default(Mobile)
  /// @zod.min(1)
  email             String       @db.VarChar(100)
  comments          String?      @db.VarChar(4000)
  confirmed         Boolean      @default(false)
  currentUSEAMember Boolean      @default(false)
  /// @zod.min(1)
  businessName      String?      @db.VarChar(100)
  membershipDate    DateTime?    @default(now())
  memberType        Type
  memberStatus      Status
  JRSR              JRSR
  dateOfBirth       DateTime?
  zip               Int
  useaMemberID      Int?
  payment           Payment?
  RiderCombo        RiderCombo[]
  Horse             Horse[]

  @@id([fullName])
}

model Payment {
  updatedAt     DateTime?      @updatedAt
  comments      String?        @db.VarChar(4000)
  member        Member         @relation(fields: [payee], references: [fullName], onDelete: Cascade, onUpdate: Cascade)
  payee         String         @id
  amountPaid    Int?
  datePaid      DateTime?
  paymentMethod PaymentMethod?
  checkNumber   Int?
}

model Horse {
  createdAt        DateTime?            @default(now())
  updatedAt        DateTime?            @updatedAt
  /// @zod.min(1)
  horseRN          String               @id @db.VarChar(255)
  /// @zod.min(1)
  horseAKA         String?              @db.VarChar(255)
  notConnected     Boolean?             @default(false)
  ownerRec         NonMemberHorseOwner? @relation(fields: [owner], references: [fullName], onDelete: Cascade)
  memberOwner      Member?              @relation(fields: [memberName], references: [fullName])
  memberName       String?
  registrationDate DateTime?            @default(now())
  regType          Status
  RiderCombo       RiderCombo[]
  owner            String?
}

model TotalPoints {
  uid         String     @id @default(cuid())
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @updatedAt
  division    String     @db.VarChar(20)
  totalPoints Float      @default(0)
  totalShows  Int        @default(0)
  completedHT Boolean    @default(false)
  multiVenue  Boolean    @default(false)
  rider       RiderCombo @relation(fields: [riderUid], references: [uid], onDelete: Cascade, onUpdate: Cascade)
  riderUid    String     @unique
}

model RiderCombo {
  uid        String       @id @default(cuid())
  createdAt  DateTime?    @default(now())
  updatedAt  DateTime?    @updatedAt
  member     Member       @relation(fields: [memberName], references: [fullName], onDelete: Cascade, onUpdate: Cascade)
  horse      Horse        @relation(fields: [horseName], references: [horseRN], onDelete: Cascade, onUpdate: Cascade)
  memberName String
  horseName  String
  shows      Show[]
  points     TotalPoints?
}

model Show {
  uid       String       @id @default(cuid())
  createdAt DateTime?    @default(now())
  updatedAt DateTime?    @updatedAt
  /// @zod.min(1)
  showName  String       @db.VarChar(150)
  /// @zod.min(1)
  showType  String       @db.VarChar(10)
  reviewed  Boolean      @default(false)
  riders    RiderCombo[]
}
