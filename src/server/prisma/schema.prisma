generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "PascalCase"
  modelSuffix           = "Model"
  useDecimalJs          = true
  prismaJsonNullability = true
}

enum Status {
  Life
  Annual
}

enum StatusType {
  AdultAmateur @map("Adult Amateur")
  Professional
  Junior
}

enum ShowType {
  CT
  HT
  Derby
}

enum Type {
  Individual
  Family
  Business
}

enum PhoneType {
  Mobile
  Home
  Business
}

model NonMemberHorseOwner {
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  /// @zod.min(1, { message: "First Name is required" })
  firstName String    @db.VarChar(255)
  /// @zod.min(1, { message: "Last Name is required" })
  lastName  String    @db.VarChar(255)
  fullName  String    @db.VarChar(255)
  /// @zod.email({ message: "Invalid email address" })
  email     String    @db.VarChar(100)
  /// @zod.min(1, { message: "Phone number is required" })
  phone     String    @db.VarChar(15)
  phoneType PhoneType @default(Mobile)
  /// List of Horses that are linked to a member
  horses    Horse[]

  @@id([fullName])
}

model Member {
  createdAt         DateTime?    @default(now())
  updatedAt         DateTime?    @updatedAt
  /// @zod.min(1, { message: "First Name is required" })
  firstName         String       @db.VarChar(255)
  /// @zod.min(1, { message: "Last Name is required" })
  lastName          String       @db.VarChar(255)
  fullName          String       @db.VarChar(255)
  /// Field to determine who is a board member, very few
  boardMember       Boolean      @default(false)
  /// @zod.min(1, { message: "Address is required" })
  address           String       @db.VarChar(255)
  /// @zod.min(1, { message: "City is required" })
  city              String       @db.VarChar(25)
  /// @zod.min(1, { message: "State is required" })
  state             String       @db.VarChar(25)
  /// @zod.min(1, { message: "Phone Number is required" })
  phone             String       @db.VarChar(15)
  phoneType         PhoneType    @default(Mobile)
  /// @zod.email({ message: "Invalid email address" })
  email             String       @db.VarChar(100)
  comments          String?      @db.VarChar(4000)
  /// Member needs to be confirmed by boardmember from dashboard
  confirmed         Boolean      @default(false)
  currentUSEAMember Boolean      @default(false)
  /// @zod.min(1, { message: "Business name is required" })
  businessName      String?      @db.VarChar(100)
  membershipDate    DateTime?    @default(now())
  memberType        Type
  memberStatus      Status
  memberStatusType  StatusType
  dateOfBirth       DateTime?
  zip               Int
  useaMemberID      Int?
  /// List of rider combinations member is apart of
  RiderCombo        RiderCombo[]
  /// List of Horses that are linked to a member
  Horse             Horse[]

  @@id([fullName])
}

model Horse {
  createdAt        DateTime?            @default(now())
  updatedAt        DateTime?            @updatedAt
  /// @zod.min(1, { message: "Registered horse name is required" })
  /// Registered name of the horse, unique
  horseRN          String               @id @db.VarChar(255)
  /// Barn name of the horse
  horseAKA         String?              @db.VarChar(255)
  ownerRec         NonMemberHorseOwner? @relation(fields: [owner], references: [fullName], onUpdate: Cascade)
  memberOwner      Member?              @relation(fields: [memberName], references: [fullName], onUpdate: Cascade)
  memberName       String?
  registrationDate DateTime?            @default(now())
  regType          Status
  RiderCombo       RiderCombo[]
  owner            String?
}

model RiderCombo {
  /// @zod.cuid({ message: "Invalid cuid"})
  uid         String    @id @default(cuid())
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  division    String    @db.VarChar(20)
  totalPoints Float     @default(0)
  totalShows  Int       @default(0)
  completedHT Boolean   @default(false)
  multiVenue  Boolean   @default(false)
  member      Member    @relation(fields: [memberName], references: [fullName], onDelete: Cascade, onUpdate: Cascade)
  horse       Horse     @relation(fields: [horseName], references: [horseRN], onDelete: Cascade, onUpdate: Cascade)
  /// @zod.min(1, { message: "Member Name is required" })
  memberName  String
  /// @zod.min(1, { message: "Horse Name is required" })
  horseName   String
  points      Points[]
  shows       Show[]

  @@unique([memberName, horseName, division])
}

model Points {
  /// @zod.cuid({ message: "Invalid cuid"})
  uid        String     @id @default(cuid())
  /// @zod.min(1, { message: "Member Name is required" })
  riderUid   String
  RiderCombo RiderCombo @relation(fields: [riderUid], references: [uid], onDelete: Cascade, onUpdate: Cascade)
  points     Float
  place      String
  show       Show       @relation(fields: [showUid], references: [uid], onDelete: Cascade, onUpdate: Cascade)
  showUid    String
}

model Show {
  /// @zod.cuid({ message: "Invalid cuid"})
  uid         String       @id @default(cuid())
  createdAt   DateTime?    @default(now())
  updatedAt   DateTime?    @updatedAt
  /// @zod.min(1, { message: "Show name is required" })
  showName    String       @db.VarChar(150)
  showType    ShowType
  /// Submitted points have yet to be review by board member
  reviewed    Boolean      @default(false)
  showDate    DateTime
  showEndDate DateTime?
  riders      RiderCombo[]
  /// @zod.url({ message: "Must be a valid URL" })
  url         String?
  points      Points[]

  @@unique([showName, showDate])
}
