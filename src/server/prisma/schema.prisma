generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "./zod-generated"
  useMultipleFiles                 = true
  createRelationValuesTypes        = true
  createOptionalDefaultValuesTypes = true
  createPartialTypes               = true
}

enum Status {
  Life
  Annual
}

enum StatusType {
  AdultAmateur @map("Adult Amateur")
  Professional
  Junior
}

enum ShowType {
  CT
  HT
  Derby
}

enum Type {
  Individual
  Business
}

enum PhoneType {
  Mobile
  Home
  Business
}

enum Division {
  Prelim
  Train
  Novice
  BGN
  GOLD
  GAG
}

enum Position {
  President
  VicePresident       @map("Vice President")
  Secretary
  Treasurer
  AdultMemberAtLarge  @map("Adult Member At Large")
  JuniorMemberAtLarge @map("Junior Member At Large")
  SocialMediaManager  @map("Social Media Manager")
  AwardsCoordinator   @map("Awards Coordinator")
  Points
}

model NonMemberHorseOwner {
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  /// @zod.string.trim().min(1, { message: "First Name is required" })
  firstName String    @db.VarChar(255)
  /// @zod.string.trim().min(1, { message: "Last Name is required" })
  lastName  String    @db.VarChar(255)
  /// @zod.string.trim() 
  fullName  String    @db.VarChar(255)
  /// @zod.string.trim().email({ message: "Invalid email address" })
  email     String    @db.VarChar(100)
  /// @zod.string.trim().min(1, { message: "Phone number is required" })
  phone     String    @db.VarChar(15)
  phoneType PhoneType @default(Mobile)
  /// List of Horses that are linked to a member
  horses    Horse[]

  @@id([fullName])
}

model Member {
  createdAt        DateTime?    @default(now())
  updatedAt        DateTime?    @updatedAt
  /// @zod.string.trim().min(1, { message: "First Name is required" })
  firstName        String       @db.VarChar(255)
  /// @zod.string.trim().min(1, { message: "Last Name is required" })
  lastName         String       @db.VarChar(255)
  /// @zod.string.trim()
  fullName         String       @db.VarChar(255)
  /// @zod.string.trim().min(1, { message: "Address is required" })
  address          String       @db.VarChar(255)
  /// @zod.string.trim().min(1, { message: "City is required" })
  city             String       @db.VarChar(25)
  /// @zod.string.trim().min(1, { message: "State is required" })
  state            String       @db.VarChar(25)
  /// @zod.string.trim().min(1, { message: "Phone Number is required" })
  phone            String       @db.VarChar(15)
  phoneType        PhoneType    @default(Mobile)
  /// @zod.string.trim().email({ message: "Invalid email address" })
  email            String       @db.VarChar(100)
  comments         String?      @db.VarChar(4000)
  /// Member needs to be confirmed by boardmember from dashboard
  confirmed        Boolean      @default(false)
  /// @zod.string.trim().min(1, { message: "Business name is required" })
  businessName     String?      @db.VarChar(100)
  membershipDate   DateTime?    @default(now())
  membershipEnd    DateTime? @db.Date
  memberType       Type
  memberStatus     Status
  memberStatusType StatusType
  dateOfBirth      DateTime?
  /// @zod.number.int({message: "Zipcode is required"})
  zip              Int
  /// List of rider combinations member is apart of
  RiderCombo       RiderCombo[]
  /// List of Horses that are linked to a member
  Horse            Horse[]

  @@id([fullName])
}

model Boardmember {
  name     String?  @db.VarChar(100)
  email    String?  @db.VarChar(100)
  position Position

  @@id([position])
}

model Horse {
  createdAt        DateTime?            @default(now())
  updatedAt        DateTime?            @updatedAt
  /// Registered name of the horse, unique
  /// @zod.string.trim().min(1, { message: "Registered horse name is required" })
  horseRN          String               @id @db.VarChar(255)
  /// Barn name of the horse
  /// @zod.string.trim()
  horseAKA         String?              @db.VarChar(255)
  ownerRec         NonMemberHorseOwner? @relation(fields: [owner], references: [fullName], onUpdate: Cascade)
  memberOwner      Member?              @relation(fields: [memberName], references: [fullName], onUpdate: Cascade)
  memberName       String?
  registrationDate DateTime?            @default(now())
  regType          Status
  RiderCombo       RiderCombo[]
  owner            String?
  registrationEnd  DateTime? @db.Date

  @@index([owner])
  @@index([memberName])
}

model RiderCombo {
  uid         String    @id @default(cuid())
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  division    Division
  totalPoints Float     @default(0)
  totalShows  Int       @default(0)
  completedHT Boolean   @default(false)
  multiVenue  Boolean   @default(false)
  member      Member    @relation(fields: [memberName], references: [fullName], onDelete: Cascade, onUpdate: Cascade)
  horse       Horse     @relation(fields: [horseName], references: [horseRN], onDelete: Cascade, onUpdate: Cascade)
  /// @zod.string.trim().min(1, { message: "Member Name is required" })
  memberName  String
  /// @zod.string.trim().min(1, { message: "Horse Name is required" })
  horseName   String
  points      Points[]
  shows       Show[]
  showYear    Int?

  @@unique([memberName, horseName, division, showYear])
  @@index([horseName, memberName, division, showYear])
}

model Points {
  uid        String     @id @default(cuid())
  /// @zod.string.trim().min(1, { message: "Member Name is required" })
  riderUid   String
  RiderCombo RiderCombo @relation(fields: [riderUid], references: [uid], onDelete: Cascade, onUpdate: Cascade)
  points     Float
  /// @zod.string.trim()
  place      String
  show       Show       @relation(fields: [showUid], references: [uid], onDelete: Cascade, onUpdate: Cascade)
  showUid    String

  @@index([riderUid])
  @@index([showUid])
}

model Show {
  uid         String       @id @default(cuid())
  createdAt   DateTime?    @default(now())
  updatedAt   DateTime?    @updatedAt
  /// @zod.string.trim().min(1, { message: "Show name is required" })
  showName    String       @db.VarChar(150)
  showType    ShowType
  /// Submitted points have yet to be review by board member
  reviewed    Boolean      @default(false)
  showDate    DateTime
  showEndDate DateTime?
  riders      RiderCombo[]
  /// @zod.string.trim().url({ message: "Must be a valid URL" })
  url         String?
  points      Points[]

  @@unique([showName, showDate])
}
